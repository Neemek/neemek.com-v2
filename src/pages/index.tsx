import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { ReactNode } from 'react'
import dynamic from 'next/dynamic'
import { getNouns } from './api/noun'

const inter = Inter({ subsets: ['latin'] })

const colors = [
  ['#FC466B', '#3F5EFB'],
  undefined,
  ['#00C9FF', '#92FE9D'],
  ['#f8ff00', '#3ad59f'],
  undefined,
  ['#00d2ff', '#3a47d5'],
]

const description = [
  "eemek.com",
  "gg",
  "xternal",
  "e",
  "xtermination",
  "ontact",
]

const destinations = [
  "/",
  "/",
  "/external",
  "/me",
  "/",
  "/kontact",
]

const lightDark = '#70707070'
const darkDark = '#d0d0d070'

function pickRandom<T>(from: T[]): T {
  return from[Math.floor(Math.random()*from.length)]
}

export default function Home() {

  return (
    <>
      <Head>
        <title>ðŸ‘‰neemek.comðŸ‘ˆ</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <SideBar></SideBar>
        <main className={styles.main}>
          <div className={styles.grid}>
          </div>
        </main>
      </>
    </>
  )
}

export function SideBar() {
  return (<div className={styles.sidebar}>
    {"NEEMEK".split("").map((char, i) => {
      return (
        <div className={[styles.character, inter.className, colors[i] && styles.rotate].join(' ')} style={{cursor: colors[i] ? 'pointer' : 'unset'}} onClick={() => location.pathname = destinations[i]} key={i}>
          <AnimatedGradientText from={(colors[i] ?? [darkDark])[0]} to={(colors[i] ?? ['', lightDark])[1]} cycleDuration={64}>
            {char}
            
          </AnimatedGradientText>
          {(
              colors[i] !== undefined 
              ? <AnimatedGradientText className={styles.desc} from={(colors[i] ?? [darkDark])[0]} to={(colors[i] ?? ['', lightDark])[1]} cycleDuration={64}>{description[i]}</AnimatedGradientText> 
              : <AnimatedGradientText className={styles.desc} from={darkDark} to={lightDark} cycleDuration={64}>{pickRandom(getNouns('e')).slice(1)}</AnimatedGradientText>
            )}
        </div>)
      })}
  </div>)
}

function GradientText({children, to, from}: {children: ReactNode, to: string, from: string}): JSX.Element {
  return (<span className={styles.clipToBg} style={{
    background: `-webkit-linear-gradient(180deg, ${from}, ${to})`,
  }}>{children}</span>)
}

function AnimatedGradientText({children, to, from, cycleDuration=16, className=''}: {children: ReactNode, to: string, from: string, cycleDuration?: number, className?: string}): JSX.Element {
  return (<span className={styles.clipToBg+' '+className} style={{
    background: `-webkit-linear-gradient(180deg, ${from}, ${to}, ${from}) 0 0 / var(--bg-size) 100%`,
    animation: `move-bg ${cycleDuration}s infinite linear`
  }}>{children}</span>)
}
